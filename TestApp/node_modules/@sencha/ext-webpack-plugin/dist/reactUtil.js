"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._getDefaultVars = _getDefaultVars;
exports._extractFromSource = _extractFromSource;

function _getDefaultVars() {
  return {
    touchFile: '/src/themer.js',
    watchStarted: false,
    buildstep: '1 of 1',
    firstTime: true,
    firstCompile: true,
    browserCount: 0,
    manifest: null,
    extPath: 'ext',
    pluginErrors: [],
    deps: [],
    usedExtComponents: [],
    rebuild: true
  };
}

function _extractFromSource(module, options, compilation, extComponents) {
  const logv = require('./pluginUtil').logv;

  logv(options.verbose, 'FUNCTION _extractFromSource');

  try {
    var js = module._source._value;
    logv(options.verbose, 'FUNCTION extractFromSource');

    var generate = require("@babel/generator").default;

    var parse = require("babylon").parse;

    var traverse = require("ast-traverse");

    const statements = [];
    const ast = parse(js, {
      plugins: ['jsx', 'flow', 'doExpressions', 'objectRestSpread', 'classProperties', 'exportExtensions', 'asyncGenerators', 'functionBind', 'functionSent', 'dynamicImport'],
      sourceType: 'module'
    });
    traverse(ast, {
      pre: function (node) {
        if (node.type === 'CallExpression' && node.callee && node.callee.object && node.callee.object.name === 'Ext') {
          statements.push(generate(node).code);
        }

        if (node.type == 'ImportDeclaration') {
          if (node.source.extra.rawValue == '@sencha/ext-react-classic' || node.source.extra.rawValue == '@sencha/ext-react-modern') {
            node.specifiers.forEach(n => {
              var name = n.imported.name;
              var prefix = name.substring(0, 3);

              if (prefix == 'Ext') {
                name = name.substring(3);
              }

              name = name.toLowerCase();
              statements.push(`Ext.create({xtype: '${name}'})`);
            });
          }
        }
      }
    });
    return statements;
  } catch (e) {
    //console.log(module.resource)
    //console.log(js)
    //console.log(e)
    //compilation.errors.push('extractFromSource: ' + e)
    return [];
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWFjdFV0aWwuanMiXSwibmFtZXMiOlsiX2dldERlZmF1bHRWYXJzIiwidG91Y2hGaWxlIiwid2F0Y2hTdGFydGVkIiwiYnVpbGRzdGVwIiwiZmlyc3RUaW1lIiwiZmlyc3RDb21waWxlIiwiYnJvd3NlckNvdW50IiwibWFuaWZlc3QiLCJleHRQYXRoIiwicGx1Z2luRXJyb3JzIiwiZGVwcyIsInVzZWRFeHRDb21wb25lbnRzIiwicmVidWlsZCIsIl9leHRyYWN0RnJvbVNvdXJjZSIsIm1vZHVsZSIsIm9wdGlvbnMiLCJjb21waWxhdGlvbiIsImV4dENvbXBvbmVudHMiLCJsb2d2IiwicmVxdWlyZSIsInZlcmJvc2UiLCJqcyIsIl9zb3VyY2UiLCJfdmFsdWUiLCJnZW5lcmF0ZSIsImRlZmF1bHQiLCJwYXJzZSIsInRyYXZlcnNlIiwic3RhdGVtZW50cyIsImFzdCIsInBsdWdpbnMiLCJzb3VyY2VUeXBlIiwicHJlIiwibm9kZSIsInR5cGUiLCJjYWxsZWUiLCJvYmplY3QiLCJuYW1lIiwicHVzaCIsImNvZGUiLCJzb3VyY2UiLCJleHRyYSIsInJhd1ZhbHVlIiwic3BlY2lmaWVycyIsImZvckVhY2giLCJuIiwiaW1wb3J0ZWQiLCJwcmVmaXgiLCJzdWJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVPLFNBQVNBLGVBQVQsR0FBMkI7QUFDaEMsU0FBTztBQUNMQyxJQUFBQSxTQUFTLEVBQUUsZ0JBRE47QUFFTEMsSUFBQUEsWUFBWSxFQUFHLEtBRlY7QUFHTEMsSUFBQUEsU0FBUyxFQUFFLFFBSE47QUFJTEMsSUFBQUEsU0FBUyxFQUFHLElBSlA7QUFLTEMsSUFBQUEsWUFBWSxFQUFFLElBTFQ7QUFNTEMsSUFBQUEsWUFBWSxFQUFHLENBTlY7QUFPTEMsSUFBQUEsUUFBUSxFQUFFLElBUEw7QUFRTEMsSUFBQUEsT0FBTyxFQUFFLEtBUko7QUFTTEMsSUFBQUEsWUFBWSxFQUFFLEVBVFQ7QUFV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dCI6WyJcInVzZSBzdHJpY3RcIlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9nZXREZWZhdWx0VmFycygpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdG91Y2hGaWxlOiAnL3NyYy90aGVtZXIuanMnLFxyXG4gICAgd2F0Y2hTdGFydGVkIDogZmFsc2UsXHJcbiAgICBidWlsZHN0ZXA6ICcxIG9mIDEnLFxyXG4gICAgZmlyc3RUaW1lIDogdHJ1ZSxcclxuICAgIGZpcnN0Q29tcGlsZTogdHJ1ZSxcclxuICAgIGJyb3dzZXJDb3VudCA6IDAsXHJcbiAgICBtYW5pZmVzdDogbnVsbCxcclxuICAgIGV4dFBhdGg6ICdleHQnLFxyXG4gICAgcGx1Z2luRXJyb3JzOiBbXSxcclxuICAgIGRlcHM6IFtdLFxyXG4gICAgdXNlZEV4dENvbXBvbmVudHM6IFtdLFxyXG4gICAgcmVidWlsZDogdHJ1ZVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9leHRyYWN0RnJvbVNvdXJjZShtb2R1bGUsIG9wdGlvbnMsIGNvbXBpbGF0aW9uLCBleHRDb21wb25lbnRzKSB7XHJcbiAgY29uc3QgbG9ndiA9IHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZ3ZcclxuICBsb2d2KG9wdGlvbnMudmVyYm9zZSwnRlVOQ1RJT04gX2V4dHJhY3RGcm9tU291cmNlJylcclxudHJ5IHtcclxuICAgIHZhciBqcyA9IG1vZHVsZS5fc291cmNlLl92YWx1ZVxyXG4gICAgbG9ndihvcHRpb25zLnZlcmJvc2UsJ0ZVTkNUSU9OIGV4dHJhY3RGcm9tU291cmNlJylcclxuXHJcbiAgICB2YXIgZ2VuZXJhdGUgPSByZXF1aXJlKFwiQGJhYmVsL2dlbmVyYXRvclwiKS5kZWZhdWx0XHJcbiAgICB2YXIgcGFyc2UgPSByZXF1aXJlKFwiYmFieWxvblwiKS5wYXJzZVxyXG4gICAgdmFyIHRyYXZlcnNlID0gcmVxdWlyZShcImFzdC10cmF2ZXJzZVwiKVxyXG5cclxuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBbXVxyXG5cclxuICAgIGNvbnN0IGFzdCA9IHBhcnNlKGpzLCB7XHJcbiAgICAgIHBsdWdpbnM6IFtcclxuICAgICAgICAnanN4JyxcclxuICAgICAgICAnZmxvdycsXHJcbiAgICAgICAgJ2RvRXhwcmVzc2lvbnMnLFxyXG4gICAgICAgICdvYmplY3RSZXN0U3ByZWFkJyxcclxuICAgICAgICAnY2xhc3NQcm9wZXJ0aWVzJyxcclxuICAgICAgICAnZXhwb3J0RXh0ZW5zaW9ucycsXHJcbiAgICAgICAgJ2FzeW5jR2VuZXJhdG9ycycsXHJcbiAgICAgICAgJ2Z1bmN0aW9uQmluZCcsXHJcbiAgICAgICAgJ2Z1bmN0aW9uU2VudCcsXHJcbiAgICAgICAgJ2R5bmFtaWNJbXBvcnQnXHJcbiAgICAgIF0sXHJcbiAgICAgIHNvdXJjZVR5cGU6ICdtb2R1bGUnXHJcbiAgICB9KVxyXG5cclxuICAgIHRyYXZlcnNlKGFzdCwge1xyXG4gICAgICBwcmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnQ2FsbEV4cHJlc3Npb24nXHJcbiAgICAgICAgICAgICYmIG5vZGUuY2FsbGVlXHJcbiAgICAgICAgICAgICYmIG5vZGUuY2FsbGVlLm9iamVjdFxyXG4gICAgICAgICAgICAmJiBub2RlLmNhbGxlZS5vYmplY3QubmFtZSA9PT0gJ0V4dCcpIHtcclxuICAgICAgICAgIHN0YXRlbWVudHMucHVzaChnZW5lcmF0ZShub2RlKS5jb2RlKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9kZS50eXBlID09ICdJbXBvcnREZWNsYXJhdGlvbicpIHtcclxuICAgICAgICAgIGlmICggbm9kZS5zb3VyY2UuZXh0cmEucmF3VmFsdWUgPT0gJ0BzZW5jaGEvZXh0LXJlYWN0LWNsYXNzaWMnIHx8XHJcbiAgICAgICAgICAgICAgIG5vZGUuc291cmNlLmV4dHJhLnJhd1ZhbHVlID09ICdAc2VuY2hhL2V4dC1yZWFjdC1tb2Rlcm4nKSB7XHJcbiAgICAgICAgICAgIG5vZGUuc3BlY2lmaWVycy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgIHZhciBuYW1lID0gbi5pbXBvcnRlZC5uYW1lXHJcbiAgICAgICAgICAgICAgdmFyIHByZWZpeCA9IG5hbWUuc3Vic3RyaW5nKDAsIDMpO1xyXG4gICAgICAgICAgICAgIGlmIChwcmVmaXggPT0gJ0V4dCcpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZygzKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICAgICAgIHN0YXRlbWVudHMucHVzaChgRXh0LmNyZWF0ZSh7eHR5cGU6ICcke25hbWV9J30pYCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHN0YXRlbWVudHNcclxufVxyXG5jYXRjaChlKSB7XHJcbiAgLy9jb25zb2xlLmxvZyhtb2R1bGUucmVzb3VyY2UpXHJcbiAgLy9jb25zb2xlLmxvZyhqcylcclxuICAvL2NvbnNvbGUubG9nKGUpXHJcbiAgLy9jb21waWxhdGlvbi5lcnJvcnMucHVzaCgnZXh0cmFjdEZyb21Tb3VyY2U6ICcgKyBlKVxyXG4gIHJldHVybiBbXVxyXG59XHJcbn1cclxuIl19